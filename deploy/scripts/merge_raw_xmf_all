#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys


def printerr(m):
    sys.stderr.write(str(m) + '\n')
    sys.stderr.flush()


def parse_args():
    parser = argparse.ArgumentParser(
        description="Runs ap.merge_raw_xmf on a sequence of files"
        ". Expects input filenames of form PREFIX_STEP.xmf"
        " and for each STEP generates filenames from PREFIXES"
        ". Writes output files to current directory",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter)
    parser.add_argument('--inputs',
                        nargs='*',
                        type=str,
                        help="Input XMF files for a single prefix")
    parser.add_argument('--output',
                        type=str,
                        default="data",
                        help="Prefix for output filenames")
    parser.add_argument('--prefixes',
                        nargs='*',
                        type=str,
                        required=True,
                        help="Prefixes to generate filenames from")
    parser.add_argument('--attr',
                        nargs='*',
                        type=str,
                        help="Names of attributes to read")
    parser.add_argument('--force',
                        action='store_true',
                        help="Overwrite existing files")
    parser.add_argument('--exe',
                        default="ap.merge_raw_xmf",
                        help="Path to executable")
    parser.add_argument('--norun',
                        action='store_true',
                        help="Only print commands without running them")
    return parser.parse_args()


def main():
    args = parse_args()
    outs = []
    cmds = []
    for path in args.inputs:
        sp = os.path.basename(path).split('_')
        assert sp, "Expected filename of form PREFIX_STEP.xmf"
        dirname = os.path.dirname(path)
        tail = '_' + '_'.join(sp[1:])
        out = args.output + tail
        inp = [os.path.join(dirname, prefix + tail) for prefix in args.prefixes]
        cmd = [args.exe]
        if args.attr:
            cmd += ['--attr'] + args.attr
        cmd += ['--output'] + [out]
        cmd += ['--inputs'] + inp
        outs.append(out)
        cmds.append(cmd)

    if args.norun:
        for cmd in cmds:
            print(' '.join(cmd))
        return

    for i, (cmd, out) in enumerate(zip(cmds, outs)):
        if not args.force and os.path.isfile(out):
            printerr("skip existing '{}'".format(out))
            continue
        printerr("{:}/{:}: {}".format(i + 1, len(outs), out))
        subprocess.run(cmd, check=True)


if __name__ == "__main__":
    main()
